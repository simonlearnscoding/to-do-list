(self.webpackChunkto_do_list=self.webpackChunkto_do_list||[]).push([[179],{890:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(537),a=n.n(r),o=n(645),s=n.n(o)()(a());s.push([e.id,'@font-face {\n  font-family: myFirstFont;\n  src: url("https://fonts.googleapis.com/css2?family=Montserrat:wght@100&display=swap");\n  font-family: "Montserrat", sans-serif;\n}\n* {\n  font-family: "Montserrat", sans-serif;\n}\n\n.button {\n  background: #857F72;\n  bottom: 2rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-flow: row;\n}\n.button.project {\n  height: 40px;\n}\n.button.task {\n  width: 80px;\n  height: 80px;\n  position: absolute;\n  right: 2rem;\n  -webkit-border-radius: 90px;\n  -moz-border-radius: 90px;\n  border-radius: 90px;\n}\n.button.task:hover {\n  background: none;\n  border: 1px solid #eee3c1;\n  cursor: pointer;\n  box-shadow: rgba(184, 178, 167, 0.15) 0px 0px 3px 3px;\n}\n\n.project-component {\n  align-items: center;\n  height: 40px;\n  background: #505050;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n  display: flex;\n  cursor: pointer;\n}\n.project-component:hover {\n  background: #7e7b75;\n  transition: 1s;\n}\n.project-component.selected {\n  background: #eee3c1;\n}\n\n.project-name {\n  display: flex;\n  font-size: 1.4rem;\n  flex-grow: 4;\n  justify-content: center;\n}\n\n.trash, .edit {\n  display: flex;\n  justify-content: center;\n  min-width: 40px;\n  max-width: 40px;\n}\n.trash > img, .edit > img {\n  max-height: 20px;\n  max-width: 20px;\n}\n.trash > img:hover, .edit > img:hover {\n  filter: invert(1);\n}\n\n#tasks {\n  margin-left: 16px;\n  display: flex;\n  flex-flow: column;\n  width: 80%;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n}\n\n.task-component {\n  margin: 4px;\n  margin-top: 0px;\n  display: flex;\n  align-items: center;\n  padding-left: 8px;\n  height: 40px;\n  background: #423D33;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n}\n.task-component.three {\n  border: 1px solid #DDCA7D;\n}\n.task-component.two {\n  border: 1px solid #434038;\n}\n.task-component.one {\n  border: 2px solid #d1342f;\n}\n\n.task-checkbox {\n  min-width: 24px;\n  min-height: 24px;\n  background: #eee3c1;\n  margin-right: 16px;\n  border: 1px solid black;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n}\n.task-checkbox:hover {\n  background: #1a181a;\n  transition: 0.5s;\n}\n\n.task-description {\n  flex-grow: 3;\n}\n\n.task-date {\n  flex-grow: 1;\n  justify-self: end;\n  padding-right: 16px;\n}\n\n#fullscreen-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#add-project-button {\n  background: #1a181a;\n  color: #DDCA7D;\n}\n\n#warning-confirm, #warning-deny {\n  width: 80px;\n}\n#warning-confirm:hover, #warning-deny:hover {\n  background: none;\n  border: 1px solid #DDCA7D;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background: none;\n  border: 1px solid #DDCA7D;\n  cursor: pointer;\n}\n\n@font-face {\n  font-family: myFirstFont;\n  src: url("https://fonts.googleapis.com/css2?family=Montserrat:wght@100&display=swap");\n  font-family: "Montserrat", sans-serif;\n}\nhtml {\n  margin: 0px;\n  height: 100%;\n  width: 100%;\n  background: rgba(26, 26, 26, 0.96);\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  min-height: 100%;\n}\n\n#content {\n  min-height: 100vh;\n  display: grid;\n  grid-template: 1fr 4fr/minmax(150px, 1fr) 3.5fr;\n  place-content: stretch;\n  grid-template-areas: "header header" "sidebar tasks";\n}\n\n#header {\n  grid-area: header;\n}\n\n#tasks {\n  grid-area: tasks;\n}\n\n#sidebar {\n  grid-area: sidebar;\n  display: grid;\n  grid-template: 120px 32px 5fr 32px 2fr 40px/1fr;\n  grid-template-areas: "project-one" "." "project-two" "." "add-project" ".";\n}\n\n.project-container, #add-project-button {\n  background: #1a181a;\n  margin-left: 4px;\n  border-radius: 3px;\n}\n.project-container.default-projects, #add-project-button.default-projects {\n  grid-area: project-one;\n}\n.project-container.user-projects, #add-project-button.user-projects {\n  grid-area: project-two;\n}\n\n#add-project-button {\n  grid-area: add-project;\n  height: 80px;\n}\n#add-project-button:hover {\n  background: none;\n  border: 1px solid #eee3c1;\n  color: #D3CEC4;\n  cursor: pointer;\n}\n\n.projects {\n  grid-area: add-project;\n}\n\n.fullscreen-container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  overflow: auto;\n  backdrop-filter: blur(5px);\n}\n\n@font-face {\n  font-family: myFirstFont;\n  src: url("https://fonts.googleapis.com/css2?family=Montserrat:wght@100&display=swap");\n  font-family: "Montserrat", sans-serif;\n}\n.popup {\n  background: rgba(10, 10, 10, 0.6);\n  fill-opacity: 0.2;\n  border-radius: 6px;\n  width: 50%;\n  height: 40vh;\n  display: grid;\n  padding: 2rem;\n  justify-content: center;\n  align-items: center;\n}\n.popup.tasks {\n  grid-area: 2fr 2fr 1fr 2fr/2fr 1fr 1fr 1fr;\n  grid-template-areas: " name name name name " " desc desc desc desc " " proj proj prio date " " . . cancel ok";\n}\n\n.popup * {\n  margin: 4px;\n  border: none;\n  padding: 4px;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n}\n\n.name, .desc {\n  background: #434038;\n  color: black;\n}\n\n.name {\n  height: 40px;\n  grid-area: name;\n}\n\n.desc {\n  height: 24px;\n  opacity: 0.5;\n  grid-area: desc;\n}\n\n.proj {\n  grid-area: proj;\n  background: none;\n}\n\n.prio {\n  background: none;\n  grid-area: prio;\n}\n\n.date {\n  grid-area: date;\n  justify-self: end;\n}\n\ninput {\n  color: #000;\n}\n\n.cancel, .ok {\n  height: 40px;\n}\n\n#date {\n  justify-self: end;\n}\n\n.cancel, #cancel {\n  border: 1px solid #d1342f;\n  background: none;\n  color: #d1342f;\n}\n\n.cancel {\n  grid-area: cancel;\n}\n\n.ok, #add-project-confirm {\n  background: #d1342f;\n  color: #DDCA7D;\n}\n\n.ok {\n  grid-area: ok;\n}\n\n#add-project-confirm {\n  height: 40px;\n}\n\n@font-face {\n  font-family: myFirstFont;\n  src: url("https://fonts.googleapis.com/css2?family=Montserrat:wght@100&display=swap");\n  font-family: "Montserrat", sans-serif;\n}\n\n/*# sourceMappingURL=style.css.map */\n',"",{version:3,sources:["webpack://./src/styles/styleguide.scss","webpack://./src/styles/style.css","webpack://./src/styles/_components.scss","webpack://./src/styles/_layout.scss","webpack://./src/styles/_popup-containers.scss"],names:[],mappings:"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",sourceRoot:""}]);const i=s},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var A=this[i][0];null!=A&&(s[A]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&s[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),s=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(s).concat([o]).join("\n")}return[t].join("\n")}},484:function(e){e.exports=function(){"use strict";var e=6e4,t=36e5,n="millisecond",r="second",a="minute",o="hour",s="day",i="week",A="month",c="quarter",d="year",u="date",l="Invalid Date",p=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,f=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,m={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},E=function(e,t,n){var r=String(e);return!r||r.length>=t?e:""+Array(t+1-r.length).join(n)+e},h={s:E,z:function(e){var t=-e.utcOffset(),n=Math.abs(t),r=Math.floor(n/60),a=n%60;return(t<=0?"+":"-")+E(r,2,"0")+":"+E(a,2,"0")},m:function e(t,n){if(t.date()<n.date())return-e(n,t);var r=12*(n.year()-t.year())+(n.month()-t.month()),a=t.clone().add(r,A),o=n-a<0,s=t.clone().add(r+(o?-1:1),A);return+(-(r+(n-a)/(o?a-s:s-a))||0)},a:function(e){return e<0?Math.ceil(e)||0:Math.floor(e)},p:function(e){return{M:A,y:d,w:i,d:s,D:u,h:o,m:a,s:r,ms:n,Q:c}[e]||String(e||"").toLowerCase().replace(/s$/,"")},u:function(e){return void 0===e}},C="en",g={};g[C]=m;var b=function(e){return e instanceof j},y=function e(t,n,r){var a;if(!t)return C;if("string"==typeof t){var o=t.toLowerCase();g[o]&&(a=o),n&&(g[o]=n,a=o);var s=t.split("-");if(!a&&s.length>1)return e(s[0])}else{var i=t.name;g[i]=t,a=i}return!r&&a&&(C=a),a||!r&&C},v=function(e,t){if(b(e))return e.clone();var n="object"==typeof t?t:{};return n.date=e,n.args=arguments,new j(n)},k=h;k.l=y,k.i=b,k.w=function(e,t){return v(e,{locale:t.$L,utc:t.$u,x:t.$x,$offset:t.$offset})};var j=function(){function m(e){this.$L=y(e.locale,null,!0),this.parse(e)}var E=m.prototype;return E.parse=function(e){this.$d=function(e){var t=e.date,n=e.utc;if(null===t)return new Date(NaN);if(k.u(t))return new Date;if(t instanceof Date)return new Date(t);if("string"==typeof t&&!/Z$/i.test(t)){var r=t.match(p);if(r){var a=r[2]-1||0,o=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],a,r[3]||1,r[4]||0,r[5]||0,r[6]||0,o)):new Date(r[1],a,r[3]||1,r[4]||0,r[5]||0,r[6]||0,o)}}return new Date(t)}(e),this.$x=e.x||{},this.init()},E.init=function(){var e=this.$d;this.$y=e.getFullYear(),this.$M=e.getMonth(),this.$D=e.getDate(),this.$W=e.getDay(),this.$H=e.getHours(),this.$m=e.getMinutes(),this.$s=e.getSeconds(),this.$ms=e.getMilliseconds()},E.$utils=function(){return k},E.isValid=function(){return!(this.$d.toString()===l)},E.isSame=function(e,t){var n=v(e);return this.startOf(t)<=n&&n<=this.endOf(t)},E.isAfter=function(e,t){return v(e)<this.startOf(t)},E.isBefore=function(e,t){return this.endOf(t)<v(e)},E.$g=function(e,t,n){return k.u(e)?this[t]:this.set(n,e)},E.unix=function(){return Math.floor(this.valueOf()/1e3)},E.valueOf=function(){return this.$d.getTime()},E.startOf=function(e,t){var n=this,c=!!k.u(t)||t,l=k.p(e),p=function(e,t){var r=k.w(n.$u?Date.UTC(n.$y,t,e):new Date(n.$y,t,e),n);return c?r:r.endOf(s)},f=function(e,t){return k.w(n.toDate()[e].apply(n.toDate("s"),(c?[0,0,0,0]:[23,59,59,999]).slice(t)),n)},m=this.$W,E=this.$M,h=this.$D,C="set"+(this.$u?"UTC":"");switch(l){case d:return c?p(1,0):p(31,11);case A:return c?p(1,E):p(0,E+1);case i:var g=this.$locale().weekStart||0,b=(m<g?m+7:m)-g;return p(c?h-b:h+(6-b),E);case s:case u:return f(C+"Hours",0);case o:return f(C+"Minutes",1);case a:return f(C+"Seconds",2);case r:return f(C+"Milliseconds",3);default:return this.clone()}},E.endOf=function(e){return this.startOf(e,!1)},E.$set=function(e,t){var i,c=k.p(e),l="set"+(this.$u?"UTC":""),p=(i={},i[s]=l+"Date",i[u]=l+"Date",i[A]=l+"Month",i[d]=l+"FullYear",i[o]=l+"Hours",i[a]=l+"Minutes",i[r]=l+"Seconds",i[n]=l+"Milliseconds",i)[c],f=c===s?this.$D+(t-this.$W):t;if(c===A||c===d){var m=this.clone().set(u,1);m.$d[p](f),m.init(),this.$d=m.set(u,Math.min(this.$D,m.daysInMonth())).$d}else p&&this.$d[p](f);return this.init(),this},E.set=function(e,t){return this.clone().$set(e,t)},E.get=function(e){return this[k.p(e)]()},E.add=function(n,c){var u,l=this;n=Number(n);var p=k.p(c),f=function(e){var t=v(l);return k.w(t.date(t.date()+Math.round(e*n)),l)};if(p===A)return this.set(A,this.$M+n);if(p===d)return this.set(d,this.$y+n);if(p===s)return f(1);if(p===i)return f(7);var m=(u={},u[a]=e,u[o]=t,u[r]=1e3,u)[p]||1,E=this.$d.getTime()+n*m;return k.w(E,this)},E.subtract=function(e,t){return this.add(-1*e,t)},E.format=function(e){var t=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=e||"YYYY-MM-DDTHH:mm:ssZ",a=k.z(this),o=this.$H,s=this.$m,i=this.$M,A=n.weekdays,c=n.months,d=function(e,n,a,o){return e&&(e[n]||e(t,r))||a[n].slice(0,o)},u=function(e){return k.s(o%12||12,e,"0")},p=n.meridiem||function(e,t,n){var r=e<12?"AM":"PM";return n?r.toLowerCase():r},m={YY:String(this.$y).slice(-2),YYYY:this.$y,M:i+1,MM:k.s(i+1,2,"0"),MMM:d(n.monthsShort,i,c,3),MMMM:d(c,i),D:this.$D,DD:k.s(this.$D,2,"0"),d:String(this.$W),dd:d(n.weekdaysMin,this.$W,A,2),ddd:d(n.weekdaysShort,this.$W,A,3),dddd:A[this.$W],H:String(o),HH:k.s(o,2,"0"),h:u(1),hh:u(2),a:p(o,s,!0),A:p(o,s,!1),m:String(s),mm:k.s(s,2,"0"),s:String(this.$s),ss:k.s(this.$s,2,"0"),SSS:k.s(this.$ms,3,"0"),Z:a};return r.replace(f,(function(e,t){return t||m[e]||a.replace(":","")}))},E.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},E.diff=function(n,u,l){var p,f=k.p(u),m=v(n),E=(m.utcOffset()-this.utcOffset())*e,h=this-m,C=k.m(this,m);return C=(p={},p[d]=C/12,p[A]=C,p[c]=C/3,p[i]=(h-E)/6048e5,p[s]=(h-E)/864e5,p[o]=h/t,p[a]=h/e,p[r]=h/1e3,p)[f]||h,l?C:k.a(C)},E.daysInMonth=function(){return this.endOf(A).$D},E.$locale=function(){return g[this.$L]},E.locale=function(e,t){if(!e)return this.$L;var n=this.clone(),r=y(e,t,!0);return r&&(n.$L=r),n},E.clone=function(){return k.w(this.$d,this)},E.toDate=function(){return new Date(this.valueOf())},E.toJSON=function(){return this.isValid()?this.toISOString():null},E.toISOString=function(){return this.$d.toISOString()},E.toString=function(){return this.$d.toUTCString()},m}(),x=j.prototype;return v.prototype=x,[["$ms",n],["$s",r],["$m",a],["$H",o],["$W",s],["$M",A],["$y",d],["$D",u]].forEach((function(e){x[e[1]]=function(t){return this.$g(t,e[0],e[1])}})),v.extend=function(e,t){return e.$i||(e(t,j,v),e.$i=!0),v},v.locale=y,v.isDayjs=b,v.unix=function(e){return v(1e3*e)},v.en=g[C],v.Ls=g,v.p={},v}()},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},s=[],i=0;i<e.length;i++){var A=e[i],c=r.base?A[0]+r.base:A[0],d=o[c]||0,u="".concat(c," ").concat(d);o[c]=d+1;var l=n(u),p={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==l)t[l].references++,t[l].updater(p);else{var f=a(p,r);r.byIndex=i,t.splice(i,0,{identifier:u,updater:f,references:1})}s.push(u)}return s}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var i=n(o[s]);t[i].references--}for(var A=r(e,a),c=0;c<o.length;c++){var d=n(o[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}o=A}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},218:(e,t,n)=>{"use strict";const r=n.p+"bba7f8a90befcbd8f9c0.svg",a=n.p+"fa3ae4629719422e7033.svg";class o{static write(e,t){let n=o.#e(t);o.#t(e,n),function(e){"tasks"===e.type?D.createTaskObject(e):D.createProjectObject(e)}(n)}static change(e,t,n){let r=JSON.parse(localStorage.getItem(e))||[];const a=o.#e(t),s={...n};var i,A;r.filter((e=>e.name===s.name)).map((e=>Object.assign(e,a))),localStorage.setItem(e,JSON.stringify(r)),"project"===e&&(i=s.name,A=a.name,g===i&&(g=A),function(e,t){let n=JSON.parse(localStorage.getItem("tasks"))||[];for(let r=0;r<n.length;r++)n[r].project===e&&(n[r].project=t);localStorage.setItem("tasks",JSON.stringify(n))}(s.name,a.name)),D.createProjects(),D.createTasks()}static#e(e){e.preventDefault();const t=new FormData(e.target);return Object.fromEntries(t.entries())}static#t(e,t){let n=JSON.parse(localStorage.getItem(e))||[];n.push(t),localStorage.setItem(e,JSON.stringify(n))}static removeProject(e){o.removeObject("project",e,"name"),o.removeObject("tasks",e,"project")}static removeObject(e,t,n="name"){const r=(JSON.parse(localStorage.getItem(e))||[]).filter((e=>e[n]!==t));localStorage.setItem(e,JSON.stringify(r))}}class s{static getObject(e,t){return(JSON.parse(localStorage.getItem(e))||[]).filter((e=>e.name===t))[0]}static getProjects(){return s.getItems("project").map((e=>e.name))}static filterTasksforProject(e,t){return e.filter((e=>e.project===t))}static getItems(e){return JSON.parse(localStorage.getItem(e))||[]}}let i=!1;const A={spawnPopup:(e,t)=>{let n=F.addHTML("form",e);return n.autocomplete="off",function(e){{let n=F.addHTML("div","",["fullscreen-container"],"fullscreen-container");M.appendChild(n),F.giveHTMLIdentity(e,["popup",t],`${t}-input-form`),n.appendChild(e)}}(n),n},closePopup:e=>{i=!1,document.getElementById("fullscreen-container").remove(),e.remove()},editObject:(e,t,n,r)=>{o.change(e,n,t),A.closePopup(r),A.reloadSite()},createObject:(e,t,n)=>{o.write(e,t),A.closePopup(n),A.reloadSite()},reloadSite:()=>{w.loadProjects(),D.loadTasks(g),w.projectSelectCss(g)}};class c{constructor(e,t,n){i=!0,this.spawnPopup=A.spawnPopup;const r=h.create(e,t,n);return this.spawnPopup(r,e)}}class d extends c{constructor(e){const t=super(e,!1);t.addEventListener("submit",(function(n){A.createObject(e,n,t)}))}}class u extends c{constructor(e,t){const n=super(e,!0,t);n.addEventListener("submit",(function(r){A.editObject(e,t,r,n)}))}}class l extends u{constructor(e){super("tasks",e)}}class p extends d{constructor(){super("tasks")}}class f extends d{constructor(){super("project")}}class m extends u{constructor(e){super("project",e)}}class E extends c{constructor(e){const t=super("project-delete",!1,e);F.giveHTMLIdentity(t,["popup","warning"],null),document.getElementById("warning-confirm").addEventListener("click",(function(){w.deleteProject(e)})),document.getElementById("warning-cancel").addEventListener("click",A.closePopup)}}class h{static create(e,t,n=null){return h.decisionMaker(e,t,n)}static decisionMaker(e,t,n){return!0===t?"tasks"===e?h.taskFormEdit(n):h.projectFormEdit(n):"tasks"===e?h.taskForm():"project-delete"===e?h.projectDeletepopUp(n):h.projectForm()}static taskForm(e){let t=(e=>{try{return e.project}catch(e){return null}})(e);return`<input class="name" type="text" placeholder="Task Name" name="name" required />\n           <input type="hidden"  name="type" value="tasks"/>\n           <div class="prio">\n            <label  for="priority">Priority </label>\n            <select name="priority" id="priority">\n           <option value="one">1</option>\n           <option value="two">2</option>\n           <option value="three">3</option> \n           <option selected="selected" value="four">4</option>\n            </select>\n           </div>\n           <div class="proj">\n           <label for="project">Project</label>\n           <select id="project" name="project" >\n            ${w.getProjectOptions(t)}\n           </select>           \n           \n</div>\n            <div class="date">\n           <label for="date">Due Date</label>\n           <input type="date" name="date" id="date">\n</div>\n            \n         \n         <textarea class="desc" placeholder="Describe your task here!" name="description" form="task-input-form" cols="1" rows="1"></textarea>\n        <button class="cancel" id="cancel">Cancel</button>\n        <button class="ok">Add Task</button>`}static taskFormEdit(e){let t=(e=>{try{return e.project}catch(e){return null}})(e),n=w.getProjectOptions(t);return`<input class="name" type="text" value="${e.name}" name="name" required />\n           <input type="hidden"  name="type" value="tasks"/>\n           \n           <div class="prio">\n            <label  for="priority">Priority </label>\n            <select name="priority" id="priority">\n            ${(e=>{let t="";const n=["one","two","three","four"];for(let r=0;r<4;r++){let a="";e.priority===n[r]&&(a='selected="selected"'),t+=`<option ${a} value="${n[r]}">${r+1}</option> \n`}return console.log(t),t})(e)}\n            </select>\n           </div>\n           \n           <div class="proj">\n           <label for="project">Project</label>\n           <select id="project" name="project">\n            ${n}\n           </select>           \n           \n</div>\n            <div class="date">\n           <label for="date">Due Date</label>\n           <input type="date" name="date" value="${e.date}" id="date">\n</div>\n             \n         <textarea class="desc" name="description" form="task-input-form"  cols="1" rows="1">${e.description}</textarea>\n        <button class="cancel" id="cancel">Cancel</button>\n        <button class="ok">Edit Task</button>`}static projectForm(){return' `<input type="text" placeholder="Project Name" name="name" required />\n<input type="hidden"  name="type" value="project"/>\n<input type="hidden"  name="kind" value="user"/>\n         <textarea placeholder="What is this project about?" cols="30" rows="5"></textarea>\n         <button id="cancel">Cancel</button>\n        <button id="add-project-confirm">Create Project</button>`'}static projectFormEdit(e){return`<input type="text" value="${e.name}" name="name" required />\n' +\n            '<input type="hidden"  name="type" value="project"/>\n' +\n            '         <textarea cols="30" rows="5">${e.description}</textarea>\n' +\n            '         <button id="cancel">Cancel</button>\n' +\n            '        <button id="add-project-confirm">Edit Project</button>`}static projectDeletepopUp(e){return`<h2> Are you sure you want to delete ${e.name}?<h2>\n<button id="warning-confirm" class="ok" value="1"> Yes </button>\n<button id="warning-deny" class="cancel" value="0"> No </button>`}}const C=n(484);let g="inbox";const b=[],y=[];class v{constructor(e){this.name=e.name,this.type=e.type}}class k extends v{constructor(e){super(e),this.priority=e.priority,this.project=e.project,this.date=e.date,this.delete=x}spawn(){const e=function(e){const t=document.getElementById("tasks"),n=F.addHTML("div","",["task-component"],e.priority,e.name);return n.addEventListener("click",(()=>new l(e))),t.appendChild(n),n}(this);!function(t){const n=F.addHTML("div","",["task-checkbox"],""),r=t;n.addEventListener("click",(function(e){e.stopPropagation(),r.delete(r,b),D.loadTasks(g)})),e.appendChild(n)}(this),function(t){const n=F.addHTML("div",t.name,["task-description"],"");e.appendChild(n)}(this),function(t){if(t.date){let n=D.createTaskDateObj(t),r=F.addHTML("div",n.readableDate,["task-date"],"");"overdue"===n.readableDate&&(r.style.color="red;"),e.appendChild(r)}}(this)}}class j extends v{constructor(e){super(e),this.delete=x,this.kind=e.kind}spawn(){const e=function(e,t){const n=document.getElementById(t);let r=F.addHTML("div","",["project-component"],e.name);return n.appendChild(r),r}(this,`${this.kind}-projects`);var t;!function(t){let n=F.addHTML("div",t.name,["project-name"],t.name);const r=t;n.addEventListener("click",(function(){var e;e=r.name,g=e,D.loadTasks(e),w.projectSelectCss(e)})),e.appendChild(n)}(this),"default"!==(t=this).kind&&(function(e,t){let n=F.addHTML("div","",["edit"],null);const r=new Image;r.src=a,n.appendChild(r),n.addEventListener("click",(()=>new m(t))),e.appendChild(n)}(e,t),function(e,t){let n=F.addHTML("div","",["trash"],null);const a=new Image;a.src=r,n.appendChild(a);const o=t;n.addEventListener("click",(function(e){e.stopPropagation(),new E(o)})),e.appendChild(n)}(e,t))}}const x=(e,t)=>{o.removeObject(e.type,e.name),function(e,t){for(var n=0;n<t.length;n++)if(t[n].name===e.name){t.splice(n,1);break}}(e,t)};class w{static loadProjects(){O.emptyContainer("default-projects"),O.emptyContainer("user-projects");for(let e of y)e.spawn()}static selectedInbox(){document.getElementById("inbox").classList.add("selected")}static getProjectOptions(e=null){let t,n=g;null!=e&&(n=e),t="inbox"===n?"<option selected='selected' value='inbox'>Inbox</option>":"<option value='inbox'>Inbox</option>";for(let e in y){let r=y[e].name;t+=r===n?`\n<option selected="selected" value="${r}">${r}</option>`:`\n<option value="${r}">${r}</option>`}return t}static deleteProject(e){x(e,y),e===g&&(g="inbox",w.selectedInbox()),w.loadProjects(),D.loadTasks(g)}static projectSelectCss(e){document.querySelectorAll(".project-component").forEach((e=>e.classList.remove("selected"))),document.getElementById(e).classList.add("selected")}}class D{static createProjects(){var e;y.length=0,function(e){let t=s.getItems("project");t.forEach((e=>e.kind="user")),t.forEach((t=>{e.createProjectObject(t)}))}(this),e=this,[{name:"inbox",type:"project",kind:"default"},{name:"this week",type:"project",kind:"default"},{name:"this month",type:"project",kind:"default"}].forEach((t=>{e.createProjectObject(t)}))}static createProjectObject(e){const t=new j(e);y.push(t)}static createTasks(){b.length=0,s.getItems("tasks").forEach((e=>{D.createTaskObject(e)}))}static createTaskObject(e){const t=new k(e);b.push(t)}static loadTasks(e){O.emptyContainer("tasks");let t=function(e,t){return function(e){return!!("this week"===e|"this month"===e)}(e)?function(e,t){let n=function(e){return"this week"===e?7:"this month"===e?function(){const e=new Date,t=e.getFullYear(),n=e.getMonth()+1,r=e.getDate();return a(t,n)-r;function a(e,t){return new Date(e,t,0).getDate()}}():void 0}(e);return t.filter((e=>{if(D.createTaskDateObj(e).daysDifference<=n)return!0}))}(e,t):function(e){let t=s.getProjects();if(t.push("inbox"),t.includes(e))return!0}(e)?function(e,t){return s.filterTasksforProject(t,e)}(e,t):void 0}(e,b);!function(e){for(let t of e)t.spawn()}(t)}static createTaskDateObj(e){const t=e.date,n=B.daysUntilDueDate(t);return{daysDifference:n,readableDate:B.DateToString(n,t)}}}class B{static daysUntilDueDate(e){const t=B.getObjDueDate(e),n=new Date(C().startOf("day")),r=B.calcTimeDifference(n,t);return B.msIntoDays(r)}static getWeekDate(e){return e.toLocaleString("en-us",{weekday:"long"})}static calcTimeDifference(e,t){return t.getTime()-e.getTime()}static getObjDueDate(e){return new Date(e)}static msIntoDays(e){return Math.floor(e/864e5)}static DateToString(e,t){const n=B.getObjDueDate(t);return function(e,t,n){if(e<0)return"overdue";if(0===e)return"today";if(1===e)return"tomorrow";if(2===e)return"in two days";if(e>2&&e<7)return`on ${t.toLowerCase()}`;if(e>7&&e<=14)return`next ${t.toLowerCase()}`;if(e>14&&e<=21)return"in two weeks";if(e>21&&e<=28)return"in three weeks";if(e>28&&e<=364){let e=""+n;return e=e.slice(4,11),e}if(e>364){let e=""+n;return e=e.slice(4,15),e}}(e,B.getWeekDate(n),n)}}const $=n.p+"1c9f9617173b55c05c0b.png",M=document.body;document.createElement("div");class F{constructor(){}static loadHomepage(){F.createMainStructure(),O.createElements()}static createMainStructure(){F.createMainSections(),F.createProjectContainers(),F.createTaskContainer()}static createMainSections(){const e=document.body;e.id="body";const t=document.createElement("div");t.id="content",e.appendChild(t);let n=["sidebar","header","tasks"];for(let e in n){let r=this.addHTML("div","",null,n[e]);t.appendChild(r)}}static createTaskContainer(){let e=F.addHTML("div","",null,"task-container");document.getElementById("tasks").appendChild(e)}static createProjectContainers(){const e=F.addHTML("div","",["project-container","default-projects"],"default-projects"),t=F.addHTML("div","",["project-container","user-projects"],"user-projects"),n=document.getElementById("sidebar");n.appendChild(e),n.appendChild(t)}static addHTML(e,t,n=null,r=null){let a=document.createElement(e);return a.innerHTML=t,F.giveHTMLIdentity(a,n,r),a}static giveHTMLIdentity(e,t,n){return function(e,t){if(null!==t)for(let n in t)e.classList.add(t[n])}(e,t),function(e,t){null!==t&&(e.id=t)}(e,n),e}}class O{static createElements(){D.createTasks(),D.createProjects(),w.loadProjects(),D.loadTasks("inbox"),T.createButtons(),w.selectedInbox(),document.addEventListener("keydown",(e=>{!function(e){const t=e.key;"Escape"==t&&c.closePopup(),i||("q"==t&&c.createTaskPopup(),"p"==t&&c.createProjectPopup())}(e)}))}static emptyContainer(e){document.getElementById(e).innerHTML=""}}class T{static createButtons(){T.#n(),T.#r()}static#n(){let e=F.addHTML("div","+ Add a project",["button","project"],"add-project-button");document.getElementById("sidebar").appendChild(e),e.addEventListener("click",(()=>new f))}static#r(){let e=F.addHTML("div","",["button","task"],"add-task-button");const t=new Image;t.src=$,e.appendChild(t),M.appendChild(e),e.addEventListener("click",(()=>new p))}}var S=n(379),I=n.n(S),L=n(795),H=n.n(L),P=n(569),J=n.n(P),N=n(565),Y=n.n(N),W=n(216),_=n.n(W),G=n(589),U=n.n(G),q=n(890),R={};R.styleTagTransform=U(),R.setAttributes=Y(),R.insert=J().bind(null,"head"),R.domAPI=H(),R.insertStyleElement=_(),I()(q.Z,R),q.Z&&q.Z.locals&&q.Z.locals,console.log("hallo?"),document.addEventListener("DOMContentLoaded",F.loadHomepage)}},e=>{e(e.s=218)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,